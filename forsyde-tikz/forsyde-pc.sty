\NeedsTeXFormat{LaTeX2e}
\RequirePackage{forsyde-tikz}
\ProvidesPackage{forsyde-pc}
                 [2015/05/20 v0.3 Some user-defined macros for ForSyDe process network constructors]

% Leaf processes
\newcommand\delay[4][]    {\leafstd[#1, ni=1, no=1, nf=1, type=delay]{#2}{#3}{#4}}
\newcommand\delayn[4][]   {\leafstd[#1, ni=1, no=1, nf=2, type=delayn]{#2}{#3}{#4}}
\newcommand\map[4][]      {\leafstd[#1, ni=1, no=1, nf=1, type=map]{#2}{#3}{#4}}
\newcommand\comb[4][]     {\leafstd[#1, ni=1, no=1, nf=1, type=comb]{#2}{#3}{#4}}
\newcommand\combII[4][]   {\leafstd[#1, ni=2, no=1, nf=1, type=comb2]{#2}{#3}{#4}}
\newcommand\combIII[4][]  {\leafstd[#1, ni=3, no=1, nf=1, type=comb3]{#2}{#3}{#4}}
\newcommand\combIV[4][]   {\leafstd[#1, ni=4, no=1, nf=1, type=comb4]{#2}{#3}{#4}}
\newcommand\scanl[4][]    {\leafstd[#1, ni=1, no=1, nf=2, type=scanl]{#2}{#3}{#4}}
\newcommand\scanlII[4][]  {\leafstd[#1, ni=2, no=1, nf=2, type=scanl2]{#2}{#3}{#4}}
\newcommand\scanlIII[4][] {\leafstd[#1, ni=3, no=1, nf=2, type=scanl3]{#2}{#3}{#4}}
\newcommand\scanld[4][]   {\leafstd[#1, ni=1, no=1, nf=2, type=scanld]{#2}{#3}{#4}}
\newcommand\scanldII[4][] {\leafstd[#1, ni=2, no=1, nf=2, type=scanld2]{#2}{#3}{#4}}
\newcommand\scanldIII[4][]{\leafstd[#1, ni=3, no=1, nf=2, type=scanld3]{#2}{#3}{#4}}
\newcommand\moore[4][]    {\leafstd[#1, ni=1, no=1, nf=3, type=moore]{#2}{#3}{#4}}
\newcommand\mooreII[4][]  {\leafstd[#1, ni=2, no=1, nf=3, type=moore2]{#2}{#3}{#4}}
\newcommand\mooreIII[4][] {\leafstd[#1, ni=3, no=1, nf=3, type=moore3]{#2}{#3}{#4}}
\newcommand\mealy[4][]    {\leafstd[#1, ni=1, no=1, nf=3, type=mealy]{#2}{#3}{#4}}
\newcommand\mealyII[4][]  {\leafstd[#1, ni=2, no=1, nf=3, type=mealy2]{#2}{#3}{#4}}
\newcommand\mealyIII[4][] {\leafstd[#1, ni=3, no=1, nf=3, type=mealy3]{#2}{#3}{#4}}
\newcommand\source[4][]   {\leafstd[#1, ni=1, no=1, nf=2, type=source]{#2}{#3}{#4}}
\newcommand\filter[4][]   {\leafstd[#1, ni=1, no=1, nf=1, type=filter]{#2}{#3}{#4}}
\newcommand\hold[4][]     {\leafstd[#1, ni=1, no=1, nf=1, type=hold]{#2}{#3}{#4}}
\newcommand\fillS[4][]     {\leafstd[#1, ni=1, no=1, nf=1, type=fill]{#2}{#3}{#4}}
\newcommand\zip[3][]      {\leafcustom[#1,ni=2,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipIII[3][]   {\leafcustom[#1,ni=3,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipIV[3][]    {\leafcustom[#1,ni=4,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipV[3][]     {\leafcustom[#1,ni=5,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipVI[3][]    {\leafcustom[#1,ni=6,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\unzip[3][]    {\leafcustom[#1, ni=1, no=2, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipIII[3][] {\leafcustom[#1, ni=1, no=3, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipIV[3][]  {\leafcustom[#1, ni=1, no=4, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipV[3][]   {\leafcustom[#1, ni=1, no=5, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipVI[3][]  {\leafcustom[#1, ni=1, no=6, shape=zip shape, reverse shape]{#2}{#3}}

% Composite processes
\newcommand\composite[4][]{\compositestd[#1]{#2}{#3}{#4}}
\newcommand\blackbox[4][] {\compositebbox[#1]{#2}{#3}{#4}}

% Interface processes
\newcommand\domaininterface[4][] {\interface[#1, mocin=\MoC, mocout=\MoC]{#2}{#3}{#4}}
\newcommand\mocinterface[4][]    {\interface[#1]{#2}{#3}{#4}}

% Applicative patterns
\newcommand\farm[4][]     {\patterncluster[#1, shape=dp shape, nf=0, type=farm]{#2}{#3}{#4}}
\newcommand\farmI[4][]    {\patterncluster[#1, shape=dp shape, nf=1, type=farm1]{#2}{#3}{#4}}
\newcommand\farmII[4][]   {\patterncluster[#1, shape=dp shape, nf=2, type=farm2]{#2}{#3}{#4}}
\newcommand\farmIII[4][]  {\patterncluster[#1, shape=dp shape, nf=3, type=farm3]{#2}{#3}{#4}}
\newcommand\farmIV[4][]   {\patterncluster[#1, shape=dp shape, nf=4, type=farm4]{#2}{#3}{#4}}
\newcommand\pipe[4][]     {\patterncluster[#1, shape=pipe shape, nf=0, type=pipe]{#2}{#3}{#4}}
\newcommand\pipeI[4][]    {\patterncluster[#1, shape=pipe shape, nf=1, type=pipe1]{#2}{#3}{#4}}
\newcommand\pipeII[4][]   {\patterncluster[#1, shape=pipe shape, nf=2, type=pipe2]{#2}{#3}{#4}}
\newcommand\pipeIII[4][]  {\patterncluster[#1, shape=pipe shape, nf=3, type=pipe3]{#2}{#3}{#4}}
\newcommand\pipeIV[4][]   {\patterncluster[#1, shape=pipe shape, nf=4, type=pipe4]{#2}{#3}{#4}}
\newcommand\reduce[4][]   {\patterncluster[#1, shape=merge shape, nf=0, type=reduce]{#2}{#3}{#4}}
\newcommand\reduceI[4][]  {\patterncluster[#1, shape=merge shape, nf=1, type=reduce1]{#2}{#3}{#4}}
\newcommand\reduceII[4][] {\patterncluster[#1, shape=merge shape, nf=2, type=reduce2]{#2}{#3}{#4}}
\newcommand\reduceIII[4][]{\patterncluster[#1, shape=merge shape, nf=3, type=reduce3]{#2}{#3}{#4}}
\newcommand\reduceIV[4][] {\patterncluster[#1, shape=merge shape, nf=4, type=reduce4]{#2}{#3}{#4}}
%\newcommand\generate[4][] {\parcomp[#1, type=merge,reverse shape=true]{#2}{#3}{#4}}

\newcommand\systolic[4][] {\patterncluster[#1, shape=generic shape, nf=1]{#2}{#3}{#4}}

% Transition patterns

\newcommand\unzipx[3][]   
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape s1v1, type=unzipx]{#2}{#3}}
\newcommand\zipx[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape s1v1, reverse shape, type=zipx]{#2}{#3}}
\newcommand\unzipv[3][]
	{\patternnodestd[#1, ni=1, no=2, outer shape=transition shape v1v2, type=unzipv]{#2}{#3}}
\newcommand\zipv[3][]
	{\patternnodestd[#1, ni=2, no=1, outer shape=transition shape v2v1, type=zipv]{#2}{#3}}
\newcommand\splitatv[3][] 
	{\patternnodestd[#1, ni=1, no=2, outer shape=transition shape v1v2, type=splitAt, nf=1]{#2}{#3}}
\newcommand\catv[3][]     
	{\patternnodestd[#1, ni=2, no=1, outer shape=transition shape v2v1, type=cat]{#2}{#3}}
\newcommand\oddsv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1v1, type=odds]{#2}{#3}}
\newcommand\evensv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1v1, type=evens]{#2}{#3}}
\newcommand\reversev[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1v1, type=reverse]{#2}{#3}}
\newcommand\groupv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1gv1, type=group]{#2}{#3}}
\newcommand\concatv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1gv1, type=concat, reverse shape]{#2}{#3}}
\newcommand\filteridxv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1v1, type=filterIdx, nf=1]{#2}{#3}}
\newcommand\gatherv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1v1, type=gather, nf=2]{#2}{#3}}
\newcommand\gatherAdpv[3][]
	{\patternnodestd[#1, ni=2, no=1, outer shape=transition shape v2v1, type=gatherAdp, nf=2]{#2}{#3}}
\newcommand\selectv[3][]
	{\patternnodestd[#1, ni=2, no=1, outer shape=transition shape v2v1, type=select]{#2}{#3}}
\newcommand\distributev[3][]
	{\patternnodestd[#1, ni=2, no=1, outer shape=transition shape v2v1, type=distribute, nf=1]{#2}{#3}}
\newcommand\filterv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1v1, type=filter, nf=1]{#2}{#3}}
\newcommand\getv[3][]
	{\patternnodestd[#1, ni=1, no=1, outer shape=transition shape v1v1, type=get, nf=1]{#2}{#3}}

% Visual depictions of transition patterns

\newcommand\visualunzipv[3][]{
	\patternnodecustom[#1, ni=1, no=2, inner shape=custom conduit i4o8, 
		outer shape=transition shape v1v2]{#2}{#3};
	\foreach \i in {0,1,...,3} {
		\pgfmathtruncatemacro{\dbl}{\i+4}
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\dbl);
	}
}
\newcommand\visualzipv[3][]{
	\patternnodecustom[#1, ni=2, no=1, inner shape=custom conduit i8o4, 
		outer shape=transition shape v2v1]{#2}{#3};
	\foreach \i in {0,1,...,3} {
		\pgfmathtruncatemacro{\dbl}{\i+4}
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\dbl);
	}
}
\newcommand\visualoddsv[3][]{ 
	\patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
		outer shape=transition shape v1v1]{#2}{#3};
	\foreach \i in {0,2,...,6} {
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
	}
}
\newcommand\visualevensv[3][]{%
	\patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
		outer shape=transition shape v1v1]{#2}{#3};
	\foreach \i in {1,3,...,7} {
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
	}
}
\newcommand\visualreversev[3][]{%
	\patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
		outer shape=transition shape v1v1]{#2}{#3};
	\foreach \i in {0,1,...,7} {
		\pgfmathtruncatemacro\result{7-\i}
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\result);
	}
}
\newcommand\visualgroupv[3][]{%
	\patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
		outer shape=transition shape v1gv1]{#2}{#3};
	\foreach \i in {0,1,...,7} {
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
	}
}
\newcommand\visualconcatv[3][]{%
	\patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
		outer shape=transition shape v1gv1, reverse shape]{#2}{#3};
	\foreach \i in {0,1,...,7} {
		\draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
	}
}
