%% forsyde-plot.sty
%% Copyright 2016-2018 George Ungureanu
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is George Ungureanu.
%
% This work consists of the files listed in LICENSE.

% A library with graphical primitives plotting ForSyDe signal 
% graphs
%
% Author: George Ungureanu, KTH - Royal Institute of Technology, Sweden
% Version: 0.1
% Date: 2016/08/13
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{tikz}
\RequirePackage{pgfplots}
\RequirePackage{xparse}
\RequirePackage{calc}
\RequirePackage{etoolbox}
\usetikzlibrary{fit,calc,matrix}
\RequirePackage{environ}

\ProvidesPackage{forsyde-plot} [2017/05/20 v0.2 Signal Plot Library]
\usetikzlibrary{forsyde.shapes, forsyde.utils}


%%%%%%%%
% KEYS %
%%%%%%%%

\newcounter{signum}
\newif\ifgrid
\newif\iftimestamp
\newif\ifoverlap
\pgfkeys{/signal plot keys/.is family, /signal plot keys,
  show grid/.is if=grid,
  show timestamps/.is if=timestamp,
  overlap/.is if=overlap,
  draw inputs/.is if=drawinputs,
  draw outputs/.is if=drawoutputs,
  name/.estore in       = \plotName,
  label pos/.estore in  = \labelPos,
  step/.estore in       = \plotGridSize,
  xscale/.estore in     = \plotXScale,
  yscale/.estore in     = \plotYScale,
  xshift/.estore in     = \plotXShift,
  yshift/.estore in     = \plotYShift,
  signal sep/.estore in = \plotSep,
  at/.estore in         = \plotAt,
  anchor/.estore in     = \plotAnchor,
  grid/.style           ={show grid, step = {#1}, },
  timestamps/.style     ={show timestamps, step = {#1}, },
  grid and time/.style  ={show grid, show timestamps, step={#1}},
  left of/.style        ={at={#1}, anchor=east, xshift=-.5cm},
  right of/.style       ={at={#1}, anchor=west, xshift=.5cm},
  above of/.style       ={at={#1}, anchor=south},
  below of/.style       ={at={#1}, anchor=north},
  inputs/.style         ={left of={#1}},
  outputs/.style        ={right of={#1}},
  default/.style = {
    name=sigplot,
    label pos=mid, 
    step=5,
    xscale=.5,
    yscale=.5,
    xshift=0pt,
    yshift=0pt,
    signal sep=1,
    at={0,0},
    anchor=mid,
  }
}


%%%%%%%%%%%%%%%%%%%%%%%
% SYNCHRONOUS SIGNALS %
%%%%%%%%%%%%%%%%%%%%%%%
\NewEnviron{signalsSY}[2][]{%
  \pgfkeys{/signal plot keys, default, #1}%
  \matrix (\plotName) at (\plotAt) [%
    matrix of nodes, row sep=3pt, column sep=3pt,
    ampersand replacement=\&, nodes={align=right},
    xshift=\plotXShift, yshift=\plotYShift, anchor=\plotAnchor,
    ] {
      \BODY
    };
}

\NewDocumentCommand{\signalSY}{O{} >{ \SplitList {,} } m}{%
\ProcessList { #2 } {\syDrawEvents} \\
}

\NewDocumentCommand{\syDrawEvents}{ > {\SplitArgument{1}{:}} m }{%
\syEvent #1%
} 

\NewDocumentCommand{\syEvent} {m m} {#1 \&}

%% \inputSY[*][node keys] [<input port>] {events};
\NewDocumentCommand\inputSY{s O{} D<>{0,0} m}{%
  \node[anchor=south east, xshift=-.5cm, #2] (insig) at (#3) {#4};%
  \IfBooleanTF#1{\path[s,-|-=.9,->] (insig.south west) edge (#3);}{}%
}

% \outputSY[*][node keys] [<input port>] {events};
\NewDocumentCommand\outputSY{s O{} D<>{0,0} m}{%
  \node[anchor=south west, xshift=.5cm, #2] (outsig) at (#3) {#4};%
  \IfBooleanTF#1{\path[s,-|-=.9,<-] (outsig.south east) edge (#3);}{}%
}
 
%%%%%%%%%%%%%%%%%%%%%%%%%%
% DISCRETE EVENT SIGNALS %
%%%%%%%%%%%%%%%%%%%%%%%%%%
  
\NewDocumentEnvironment{signalsDE}{O{} m}{%
  \pgfkeys{/signal plot keys, default, #1}%
  \setcounter{signum}{0}
  \def\lastTag{#2}
  \node[%
    xshift=\plotXShift, yshift=\plotYShift,
    inner sep=1.5pt, anchor=\plotAnchor,
  ] (sigdrawing) at (\plotAt) %
  \bgroup
    \begin{tikzpicture}[%
      draw=black,xscale=\plotXScale, yscale=\plotYScale] %
      \tikzstyle{time}=[coordinate]%
    }{%
      \ifgrid%
      \pgfmathsetmacro\ymin{-\plotSep*\thesignum + 0.5}
      \foreach \x [count=\i] in {0,\plotGridSize,...,\lastTag} {
        \draw[black!60, dashed,line width=0.2pt]
        (\x,0.5) -- (\x,\ymin);
      }
      \else\fi%
    \end{tikzpicture}%
  \egroup;
  \node[ports e\thesignum w\thesignum, inner sep=0pt,
    fit=(sigdrawing)] (\plotName) {};
  \iftimestamp
  \node[anchor=south west, inner sep=0] at (\plotName .north west) {%
    \begin{tikzpicture}[%
      draw=black, %
      xscale=\plotXScale, yscale=\plotYScale,
      ] %
      \foreach \x [count=\i] in {0,\plotGridSize,...,\lastTag} {
        \pgfmathsetmacro\timestamp{(\i-1)*\plotGridSize}
        \node[anchor=south] at (\x,0.5) {%
          \textbf{\scriptsize\timestamp}};
      }
    \end{tikzpicture}
  };
  \else\fi
  % \ifdrawinputs
  % \foreach \i in {1,...,\thesignum} {
  %   \path (sigplot.e\i) edge[s,-|-,->] (\plotAt.w\i);
  % }
  % \else\fi
  % \ifdrawoutputs
  % \foreach \i in {1,...,\thesignum} {
  %   \path (sigplot.w\i) edge[s,-|-,<-] (\plotAt.e\i);
  % }
  % \else\fi
}

\usepackage{catchfile}

\newif\iftruncatevalue
\newif\iflastlabel
\pgfkeys{/designalkeys/.is family, /designalkeys,
  trunc/.is if=truncatevalue,
  last label/.is if=lastlabel,
  name/.estore in = \deName,
  default/.style = {
    trunc=false,
    last label=true,
    name=,
  }
}

\ExplSyntaxOn
\NewDocumentCommand{\signalDE}{s O{} m }{%
  \pgfkeys{/designalkeys, default, #2}%
  %%% prepare drawing of signal %%%
  \pgfmathsetmacro{\deYPos}{-\thesignum * \plotSep}
  \path (0,\deYPos) node[left] {\scriptsize\deName} node[time] (t_cur) {};
  %%% test if reading from file or string %%%
  \IfBooleanTF{#1}
  { \IfFileExists{#3}
    {\CatchFileDef{\deTokensString}{#3}{\endlinechar=-1 }}
    {\PackageError{forsyde-plot}
      {File '#3' does not exist!}
      {Please provide a valid file path to the 'signalDE' command}}
    %%% start drawing. expand the argument (once) %%%
    \desig_toklist:o { \deTokensString }
  }
  { %%% start drawing %%%
    \desig_toklist:n { #3 }
  }
  \firstitemtrue%
  \stepcounter{signum}
}

\seq_new:N \l_desig_toklist_input_seq

\cs_new_protected:Npn \desig_toklist:n #1
{
  \seq_set_split:Nnn \l_desig_toklist_input_seq {,} { #1 }
  \seq_map_inline:Nn \l_desig_toklist_input_seq
  {
    \deDrawEvents{##1}
  }
}
\cs_generate_variant:Nn \desig_toklist:n { o }
\ExplSyntaxOff

\newif\iffirstitem
\firstitemtrue   

\NewDocumentCommand{\deDrawEvents}{ > {\SplitArgument{1}{:}} m }{%
  \iffirstitem\firstitemfalse\deFirstEvent #1
  \else\deEvent #1
  \fi
} 

\NewDocumentCommand{\deFirstEvent}{m m} {%
  \def\dePrevValue{#1}%
}

\NewDocumentCommand{\deEvent}{m m} {%
  \iftruncatevalue\pgfmathtruncatemacro\valLabel{\dePrevValue}
  \else\def\valLabel{\dePrevValue}\fi
  \ifdim#2 pt<\lastTag pt%
    \draw (t_cur) -- ++(.05, .3) -- (#2-.05,.3+\deYPos) -- ++(.05,-.3)
      -- ++(-.05,-.3) -- ($(t_cur)+(.05,-.3)$) -- cycle; %
    \path (t_cur) -- node[anchor=\labelPos] {\scriptsize\valLabel}
      (#2,\deYPos) node[time] (t_cur) {};
    \def\dePrevValue{#1}
  \else%
    \iflastlabel\else\def\valLabel{}\fi
    \draw (t_cur) -- ++(.05, .3) -- (\lastTag,.3+\deYPos);
    \draw (t_cur) -- ++(.05, -.3) -- (\lastTag,-.3+\deYPos);
    \path (t_cur) -- node[anchor=\labelPos] {\scriptsize\valLabel}
      (\lastTag,\deYPos) node[time] (signal-\thesignum) {};
  \fi
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CONTINUOUS TIME SIGNALS %
%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\Colors}{{%
"E41A1C",%
"377EB8",%
"4DAF4A",%
"984EA3",%
"FF7F00",%
"FFFF33",%
"A65628",%
"F781BF"
}}

\def\ctPlotWidth{4}
%% \inputDE[*][node keys] [<position>] {span};
\NewDocumentEnvironment{signalsCT}{O{} O{0} m}{%
  \pgfkeys{/signal plot keys, default, #1}%
  \setcounter{signum}{0}
  \pgfmathsetmacro{\firstTag}{#2}
  \pgfmathsetmacro{\lastTag}{#3}
  \node[%
    xshift=\plotXShift, yshift=\plotYShift,
    inner sep=1.5pt, anchor=\plotAnchor,
  ] (sigdrawing) at (\plotAt) \bgroup
  \begin{tikzpicture}[%
    draw=black,xscale=\plotXScale, yscale=\plotYScale] %
    \tikzstyle{time}=[coordinate]%
  }{%
    \ifgrid
    \pgfmathsetmacro{\rescaleX}{\ctPlotWidth /(\lastTag -\firstTag)}
    \pgfmathsetmacro{\ymin}{-\plotSep*(\thesignum - 1) * 1.5 - .5}
    \pgfmathsetmacro{\gridstep}{\rescaleX * \plotGridSize}
    \foreach \x in {0,\gridstep,...,\ctPlotWidth} {
      \draw[black!60,dashed,line width=0.2pt] (\x,0.5) -- (\x,\ymin);
    }
    \else\fi%
  \end{tikzpicture}%
  \egroup;
  \node[ports e\thesignum w\thesignum,inner sep=0pt,
    fit=(sigdrawing)] (\plotName) {};
  \iftimestamp
  \pgfmathsetmacro{\rescaleX}{\ctPlotWidth /(\lastTag -\firstTag)}
  \pgfmathsetmacro{\gridstep}{\rescaleX * \plotGridSize}
  \node[anchor=south east, inner sep=0] at (\plotName .north east) {%
    \begin{tikzpicture}[draw=black,%
      xscale=\plotXScale, yscale=\plotYScale] 
      \foreach \x [count=\i] in {0,\gridstep,...,\ctPlotWidth} {
        \pgfmathsetmacro\timestamp{(\i -1) *\plotGridSize +\firstTag}
        \node[anchor=south,gray] at (\x,0.5) {%
          \tiny\pgfmathprintnumber{\timestamp}};
      }
      \node[anchor=south,gray] at (\ctPlotWidth,0.5) {%
        \tiny\phantom{\pgfmathprintnumber{\lastTag}}};
    \end{tikzpicture}
  };
  \else\fi
  % \ifdrawinputs
  % \foreach \i in {1,...,\thesignum} {
  %   \path (\plotName.e\i) edge[s,-|-,->] (\plotAt.w\i);
  % }
  % \else\fi
  % \ifdrawoutputs
  % \foreach \i in {1,...,\thesignum} {
  %   \path (\plotName.w\i) edge[s,-|-,<-] (\plotAt.e\i);
  % }
  % \else\fi
}


\newif\ifdrawordinate
\newif\ifdrawoutline
\pgfkeys{/ctsignalkeys/.is family, /ctsignalkeys,
  draw ordinate/.is if=drawordinate,
  outline/.is if=drawoutline,
  % step/.estore in         = \plotSamp,
  ymax/.estore in         = \plotYMax,
  ymin/.estore in         = \plotYMin,
  name/.estore in         = \ctName,
  ordinate pos/.estore in = \plotOrdPos,
  ordinate/.style  ={draw ordinate, ordinate pos={#1}},
  line style/.estore in   = \lineStyle,
  default/.style = {
    outline=false,
    % step=.1,
    ymin=0,
    ymax=1,
    name=,
    ordinate pos=0,
    line style=
  }
}

\ExplSyntaxOn
\NewDocumentCommand{\signalCT}{s O{} m}{%
  \pgfkeys{/ctsignalkeys, default, #2}%
  % determine the Y position
  \ifoverlap\pgfmathsetmacro{\deYPos}{0}
  \else\pgfmathsetmacro{\deYPos}{-\thesignum * \plotSep * 1.5}\fi
  % determine the scale
  % \pgfmathsetmacro{\plotYMin}{#2}\pgfmathsetmacro{\plotYMax}{#3}
  \pgfmathsetmacro{\rescaleY}{1/(\plotYMax - \plotYMin)}
  \pgfmathsetmacro{\rescaleX}{\ctPlotWidth /(\lastTag -\firstTag)}
  \pgfmathsetmacro{\plotShift}{(\plotYMax + \plotYMin)/2}
  % \pgfmathsetmacro{\plotStep}{\ctPlotWidth / \lastTag * \plotSamp}
  % determine the color
  \pgfmathsetmacro{\thecurrentcolor}{\Colors[\value{signum}]}
  \definecolor{currentcolor}{HTML}{\thecurrentcolor}
  % start plotting
  \path (0,\deYPos) node[left] {} node[time] (t_start) {};
  \IfBooleanTF{#1}
  { \IfFileExists{#3}
    {\CatchFileDef{\ctTokensString}{#3}{\endlinechar=-1 }}
    {\PackageError{forsyde-plot}
      {File~'#3'~does~not~exist!}
      {Please provide a valid file path to the 'signalDE' command}}
    %%% start drawing. expand the argument (once) %%%
    \ctsig_toklist:o { \ctTokensString }
  }
  { %%% start drawing %%%
    \ctsig_toklist:n { #3 }
  }
  \postDrawPlot
  % update state
  \firstitemtrue%
  \stepcounter{signum}
}
\seq_new:N \l_ctsig_toklist_input_seq

\cs_new_protected:Npn \ctsig_toklist:n #1
{
  \seq_set_split:Nnn \l_ctsig_toklist_input_seq {,} { #1 }
  \seq_map_inline:Nn \l_ctsig_toklist_input_seq
  {
    \ctDrawEvents{##1}
  }
}
\cs_generate_variant:Nn \ctsig_toklist:n { o }
\ExplSyntaxOff

\newcommand{\postDrawPlot}{
  \ifdrawordinate
    \pgfmathsetmacro{\ordYPos}{(\plotOrdPos - \plotShift) *\rescaleY +\deYPos}
    \draw[->,line width=.1pt]%
    (0,\ordYPos) node[left] (t_start) {\tiny\pgfmathprintnumber{\plotOrdPos}}
    -- (\ctPlotWidth,\ordYPos);
  \else\fi
  \ifdrawoutline
    \draw[ultra thin, gray] (0,\deYPos)
    --++(0,.5) node[left] {\tiny\pgfmathprintnumber{\plotYMax}}
    --++(\ctPlotWidth,0) ++(0,-1)
    --++(-\ctPlotWidth,0) node[left] {\tiny\pgfmathprintnumber{\plotYMin}}
    --++(0,.5);
  \else\fi
  \node[anchor=east] at (t_start.west) {\tiny\it\ctName};  
}

\NewDocumentCommand{\ctDrawEvents}{ > {\SplitArgument{1}{:}} m }{%
  \iffirstitem\ctFirstEvent #1
  \else\ctEvent #1
  \fi
} 

\NewDocumentCommand{\ctFirstEvent}{ m m }{%
  \ifdim#2 pt<\firstTag pt\else% 
  % \ifnum0#2<\firstTag\else
  \pgfmathsetmacro{\plotYPos}{(#1 -\plotShift)*\rescaleY +\deYPos}
  \node[time] (t_cur) at (0,\plotYPos){};
  \firstitemfalse
  \fi
}

\NewDocumentCommand{\ctEvent}{ m m }{%
  \ifdim#2 pt>\lastTag pt\else% 
  % \ifnum0#2>\lastTag\else
  \pgfmathsetmacro{\plotYPos}{(#1 -\plotShift)*\rescaleY +\deYPos}
  \pgfmathsetmacro{\plotXPos}{(#2 -\firstTag) *\rescaleX}
  \draw[color=currentcolor, thin, \lineStyle]
    (t_cur) -- (\plotXPos,\plotYPos) node[time] (t_cur) {};
  \fi
}
