%% forsyde-legacy.sty
%% Copyright 2016-2018 George Ungureanu
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is George Ungureanu.
%
% This work consists of the files listed in LICENSE.
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{forsyde-tikz}
\ProvidesPackage{forsyde-legacy}
  [2017/02/25 v0.1 Interface with legacy APIs]

%%%%%%%%%%%%%%%%%%%%%%%
% forsyde-tikz <= 0.3 %
%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\primitive}[4][] {\basic[primitive,#1] (#2) <#3> {#4}}
\newcommand{\primitiven}[4][]{\basic[primitiven,#1] (#2) <#3> {#4}}
\newcommand{\leafstd}[4][]   {\standard[process,#1] (#2) <#3> {#4}}
\newcommand{\leafcustom}[3][]{
  \pgfkeys{/forsyde keys, default, #1}%
  \pgfmathsetlength{\foo}{max(max(\fsdNPortLeft,\fsdNPortRight)*5pt, \fsdInnerYSep)}
  \standard[#1,inner ysep=\foo] (#2) <#3> {#4}
}
\newcommand\compositestd[4][]  {\cluster[composite,#1] (#2) <#3> {#4}}
\newcommand\compositebbox[4][] {\standard[black box,#1] (#2) <#3> {#4}}
\newcommand\patterncluster[4][]{\cluster[#1] (#2) <#3> {#4}}
\newcommand\patternnodestd[3][]{\trans[#1] (#2) <#3> {#4}}

\pgfkeys{/transition patterns keys/.is family, /transition patterns keys,
  type/.estore in       = \pType,
  inner shape/.estore in= \pInnerShape,
  outer shape/.estore in= \pOuterShape,
  ni/.estore in         = \pNIn,
  no/.estore in         = \pNOut,
  nf/.estore in         = \pNFunc,
  f1/.estore in         = \pFuncA,
  f2/.estore in         = \pFuncB,
  f3/.estore in         = \pFuncC,
  f4/.estore in         = \pFuncD,
  reverse/.is toggle,
  reverse shape/.is toggle,
  default/.style = {
    type= ,
    inner shape = noinner, 
    outer shape = transition shape v1v1,
    ni=1, no=1, nf=0, 
    f1=$ f_1 $, 
    f2=$ f_2 $, 
    f3=$ f_3 $, 
    f4=$ f_4 $, 
    reverse = false, 
    reverse shape=false, 
  },
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TRANSITION PATTERNS SHAPES %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\makecomminnerbox}[2]{
  \xdef\portlist{}
  \foreach \i in {0,...,#1} {
    \pgfmathparse{1-\i*(2/#1)}
    \xdef\portlist{\portlist \i/\pgfmathresult,}
  }
  \foreach \i/\n in \portlist {
    \xdef\doanchor{
      \noexpand\anchor{vi\i}{
        \noexpand\pgfmathsetlength{\foo}{\n*20pt}
        \noexpand\pgf@y=\noexpand\foo
        \noexpand\pgf@x=-5pt
      }
    } \doanchor
  }
  \xdef\portlist{}
  \foreach \i in {0,...,#2} {
    \pgfmathparse{1-\i*(2/#2)}
    \xdef\portlist{\portlist \i/\pgfmathresult,}
  }
  \foreach \i/\n in \portlist {
    \xdef\doanchor{
      \noexpand\anchor{vo\i}{
        \noexpand\pgfmathsetlength{\foo}{\n*20pt}
        \noexpand\pgf@y=\noexpand\foo
        \noexpand\pgf@x=5pt
      }
    } \doanchor
  }
  \backgroundpath{%
    \pgfsetlinewidth{.3pt} 
    \pgfmathtruncatemacro{\nLines}{#1+1}
    \foreach \i in {1,...,\nLines} {
      \pgfmathparse{1-\i*(1/#1)+(1/#1)}
      \pgfmathsetlength{\baz}{20pt-(\pgfmathresult*40pt)}
      \southwest \pgf@xa=\pgf@x \pgf@xb=\pgf@x \advance\pgf@xb by2pt
      \pgf@ya = \baz \pgf@yb = \baz
      \pgfpathmoveto{\pgfpoint{\pgf@xa}{\pgf@ya}}
      \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yb}}
      \pgfusepath{stroke}
    }
    \pgfmathtruncatemacro{\nLines}{#2+1}
    \foreach \i in {1,...,\nLines} {
      \pgfmathparse{1-\i*(1/#2)+(1/#2)}
      \pgfmathsetlength{\baz}{20pt-(\pgfmathresult*40pt)}
      \southwest \pgf@ya = \baz \pgf@yb = \baz
      \northeast \pgf@xa=\pgf@x \pgf@xb=\pgf@x \advance\pgf@xb by-2pt	
      \pgfpathmoveto{\pgfpoint{\pgf@xa}{\pgf@ya}}
      \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yb}}	
      \pgfusepath{stroke}
    }
  }
}
\newcommand{\makecustomcommnode}[2]{
  \anchorsfromrectangle
  \savedanchor\northeast{\pgf@x=7pt\pgf@y=20pt}
  \savedanchor\centerpoint{\pgf@x=0pt\pgf@y=0pt}
  \savedanchor\southwest{\pgf@x=-7pt\pgf@y=-20pt}
  \makecomminnerbox{#1}{#2}
}
\pgfdeclareshape{custom conduit i2o2}{\makecustomcommnode{1}{1}}
\pgfdeclareshape{custom conduit i2o3}{\makecustomcommnode{1}{2}}
\pgfdeclareshape{custom conduit i2o4}{\makecustomcommnode{1}{3}}
\pgfdeclareshape{custom conduit i2o5}{\makecustomcommnode{1}{4}}
\pgfdeclareshape{custom conduit i2o6}{\makecustomcommnode{1}{5}}
\pgfdeclareshape{custom conduit i2o7}{\makecustomcommnode{1}{6}}
\pgfdeclareshape{custom conduit i2o8}{\makecustomcommnode{1}{7}}
\pgfdeclareshape{custom conduit i3o2}{\makecustomcommnode{2}{1}}
\pgfdeclareshape{custom conduit i3o3}{\makecustomcommnode{2}{2}}
\pgfdeclareshape{custom conduit i3o4}{\makecustomcommnode{2}{3}}
\pgfdeclareshape{custom conduit i3o5}{\makecustomcommnode{2}{4}}
\pgfdeclareshape{custom conduit i3o6}{\makecustomcommnode{2}{5}}
\pgfdeclareshape{custom conduit i3o7}{\makecustomcommnode{2}{6}}
\pgfdeclareshape{custom conduit i3o8}{\makecustomcommnode{2}{7}}
\pgfdeclareshape{custom conduit i4o2}{\makecustomcommnode{3}{1}}
\pgfdeclareshape{custom conduit i4o3}{\makecustomcommnode{3}{2}}
\pgfdeclareshape{custom conduit i4o4}{\makecustomcommnode{3}{3}}
\pgfdeclareshape{custom conduit i4o5}{\makecustomcommnode{3}{4}}
\pgfdeclareshape{custom conduit i4o6}{\makecustomcommnode{3}{5}}
\pgfdeclareshape{custom conduit i4o7}{\makecustomcommnode{3}{6}}
\pgfdeclareshape{custom conduit i4o8}{\makecustomcommnode{3}{7}}
\pgfdeclareshape{custom conduit i5o2}{\makecustomcommnode{4}{1}}
\pgfdeclareshape{custom conduit i5o3}{\makecustomcommnode{4}{2}}
\pgfdeclareshape{custom conduit i5o4}{\makecustomcommnode{4}{3}}
\pgfdeclareshape{custom conduit i5o5}{\makecustomcommnode{4}{4}}
\pgfdeclareshape{custom conduit i5o6}{\makecustomcommnode{4}{5}}
\pgfdeclareshape{custom conduit i5o7}{\makecustomcommnode{4}{6}}
\pgfdeclareshape{custom conduit i5o8}{\makecustomcommnode{4}{7}}
\pgfdeclareshape{custom conduit i6o2}{\makecustomcommnode{5}{1}}
\pgfdeclareshape{custom conduit i6o3}{\makecustomcommnode{5}{2}}
\pgfdeclareshape{custom conduit i6o4}{\makecustomcommnode{5}{3}}
\pgfdeclareshape{custom conduit i6o5}{\makecustomcommnode{5}{4}}
\pgfdeclareshape{custom conduit i6o6}{\makecustomcommnode{5}{5}}
\pgfdeclareshape{custom conduit i6o7}{\makecustomcommnode{5}{6}}
\pgfdeclareshape{custom conduit i6o8}{\makecustomcommnode{5}{7}}
\pgfdeclareshape{custom conduit i7o2}{\makecustomcommnode{6}{1}}
\pgfdeclareshape{custom conduit i7o3}{\makecustomcommnode{6}{2}}
\pgfdeclareshape{custom conduit i7o4}{\makecustomcommnode{6}{3}}
\pgfdeclareshape{custom conduit i7o5}{\makecustomcommnode{6}{4}}
\pgfdeclareshape{custom conduit i7o6}{\makecustomcommnode{6}{5}}
\pgfdeclareshape{custom conduit i7o7}{\makecustomcommnode{6}{6}}
\pgfdeclareshape{custom conduit i7o8}{\makecustomcommnode{6}{7}}
\pgfdeclareshape{custom conduit i8o2}{\makecustomcommnode{7}{1}}
\pgfdeclareshape{custom conduit i8o3}{\makecustomcommnode{7}{2}}
\pgfdeclareshape{custom conduit i8o4}{\makecustomcommnode{7}{3}}
\pgfdeclareshape{custom conduit i8o5}{\makecustomcommnode{7}{4}}
\pgfdeclareshape{custom conduit i8o6}{\makecustomcommnode{7}{5}}
\pgfdeclareshape{custom conduit i8o7}{\makecustomcommnode{7}{6}}
\pgfdeclareshape{custom conduit i8o8}{\makecustomcommnode{7}{7}}

  ni/.estore in         = \pNIn,
  no/.estore in         = \pNOut,
  nf/.estore in         = \pNFunc,
  f1/.estore in         = \pFuncA,
  f2/.estore in         = \pFuncB,
  f3/.estore in         = \pFuncC,
  f4/.estore in         = \pFuncD,

\newcommand\patternnodecustom[3][]{
  \pgfkeys{/transition patterns keys, default, #1}%
  \node[\pInnerShape] (#2-c) at (#3) {};
  \cluster[shape=\pOuterShape,inner sep=0pt, ni=\pNIn, no=\pNOut, nf=\pNFunc,
    f1=\pFuncA,f2=\pFuncB,f3=\pFuncC,f4=\pFuncD,] (#2) <(#2-c)> {};
}

%%%%%%%%%%%%%%%%%%%%%
% forsyde-pc <= 0.3 %
%%%%%%%%%%%%%%%%%%%%%

\newcommand\delay[4][]    {\leafstd[#1, ni=1, no=1, nf=1, type=delay]{#2}{#3}{#4}}
\newcommand\delayn[4][]   {\leafstd[#1, ni=1, no=1, nf=2, type=delayn]{#2}{#3}{#4}}
\newcommand\map[4][]      {\leafstd[#1, ni=1, no=1, nf=1, type=map]{#2}{#3}{#4}}
\newcommand\comb[4][]     {\leafstd[#1, ni=1, no=1, nf=1, type=comb]{#2}{#3}{#4}}
\newcommand\combII[4][]   {\leafstd[#1, ni=2, no=1, nf=1, type=comb2]{#2}{#3}{#4}}
\newcommand\combIII[4][]  {\leafstd[#1, ni=3, no=1, nf=1, type=comb3]{#2}{#3}{#4}}
\newcommand\combIV[4][]   {\leafstd[#1, ni=4, no=1, nf=1, type=comb4]{#2}{#3}{#4}}
\newcommand\scanl[4][]    {\leafstd[#1, ni=1, no=1, nf=2, type=scanl]{#2}{#3}{#4}}
\newcommand\scanlII[4][]  {\leafstd[#1, ni=2, no=1, nf=2, type=scanl2]{#2}{#3}{#4}}
\newcommand\scanlIII[4][] {\leafstd[#1, ni=3, no=1, nf=2, type=scanl3]{#2}{#3}{#4}}
\newcommand\scanld[4][]   {\leafstd[#1, ni=1, no=1, nf=2, type=scanld]{#2}{#3}{#4}}
\newcommand\scanldII[4][] {\leafstd[#1, ni=2, no=1, nf=2, type=scanld2]{#2}{#3}{#4}}
\newcommand\scanldIII[4][]{\leafstd[#1, ni=3, no=1, nf=2, type=scanld3]{#2}{#3}{#4}}
\newcommand\moore[4][]    {\leafstd[#1, ni=1, no=1, nf=3, type=moore]{#2}{#3}{#4}}
\newcommand\mooreII[4][]  {\leafstd[#1, ni=2, no=1, nf=3, type=moore2]{#2}{#3}{#4}}
\newcommand\mooreIII[4][] {\leafstd[#1, ni=3, no=1, nf=3, type=moore3]{#2}{#3}{#4}}
\newcommand\mealy[4][]    {\leafstd[#1, ni=1, no=1, nf=3, type=mealy]{#2}{#3}{#4}}
\newcommand\mealyII[4][]  {\leafstd[#1, ni=2, no=1, nf=3, type=mealy2]{#2}{#3}{#4}}
\newcommand\mealyIII[4][] {\leafstd[#1, ni=3, no=1, nf=3, type=mealy3]{#2}{#3}{#4}}
\newcommand\source[4][]   {\leafstd[#1, ni=1, no=1, nf=2, type=source]{#2}{#3}{#4}}
\newcommand\filter[4][]   {\leafstd[#1, ni=1, no=1, nf=1, type=filter]{#2}{#3}{#4}}
\newcommand\hold[4][]     {\leafstd[#1, ni=1, no=1, nf=1, type=hold]{#2}{#3}{#4}}
\newcommand\fillS[4][]     {\leafstd[#1, ni=1, no=1, nf=1, type=fill]{#2}{#3}{#4}}
\newcommand\zip[3][]      {\leafcustom[#1,ni=2,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipIII[3][]   {\leafcustom[#1,ni=3,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipIV[3][]    {\leafcustom[#1,ni=4,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipV[3][]     {\leafcustom[#1,ni=5,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\zipVI[3][]    {\leafcustom[#1,ni=6,no=1,shape=zip shape,reverse shape=false]{#2}{#3}}
\newcommand\unzip[3][]    {\leafcustom[#1, ni=1, no=2, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipIII[3][] {\leafcustom[#1, ni=1, no=3, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipIV[3][]  {\leafcustom[#1, ni=1, no=4, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipV[3][]   {\leafcustom[#1, ni=1, no=5, shape=zip shape, reverse shape]{#2}{#3}}
\newcommand\unzipVI[3][]  {\leafcustom[#1, ni=1, no=6, shape=zip shape, reverse shape]{#2}{#3}}

% Composite processes
\newcommand\composite[4][]{\compositestd[#1]{#2}{#3}{#4}}
\newcommand\blackbox[4][] {\compositebbox[#1]{#2}{#3}{#4}}

% Interface processes
\newcommand\domaininterface[4][] {\interface[#1, mocin=\MoC, mocout=\MoC]{#2}{#3}{#4}}
\newcommand\mocinterface[4][]    {\interface[#1]{#2}{#3}{#4}}

% Applicative patterns
\newcommand\farm[4][]     {\patterncluster[#1, shape=dp shape, nf=0, type=farm]{#2}{#3}{#4}}
\newcommand\farmI[4][]    {\patterncluster[#1, shape=dp shape, nf=1, type=farm1]{#2}{#3}{#4}}
\newcommand\farmII[4][]   {\patterncluster[#1, shape=dp shape, nf=2, type=farm2]{#2}{#3}{#4}}
\newcommand\farmIII[4][]  {\patterncluster[#1, shape=dp shape, nf=3, type=farm3]{#2}{#3}{#4}}
\newcommand\farmIV[4][]   {\patterncluster[#1, shape=dp shape, nf=4, type=farm4]{#2}{#3}{#4}}
\newcommand\pipe[4][]     {\patterncluster[#1, shape=pipe shape, nf=0, type=pipe]{#2}{#3}{#4}}
\newcommand\pipeI[4][]    {\patterncluster[#1, shape=pipe shape, nf=1, type=pipe1]{#2}{#3}{#4}}
\newcommand\pipeII[4][]   {\patterncluster[#1, shape=pipe shape, nf=2, type=pipe2]{#2}{#3}{#4}}
\newcommand\pipeIII[4][]  {\patterncluster[#1, shape=pipe shape, nf=3, type=pipe3]{#2}{#3}{#4}}
\newcommand\pipeIV[4][]   {\patterncluster[#1, shape=pipe shape, nf=4, type=pipe4]{#2}{#3}{#4}}
\newcommand\reduce[4][]   {\patterncluster[#1, shape=merge shape, nf=0, type=reduce]{#2}{#3}{#4}}
\newcommand\reduceI[4][]  {\patterncluster[#1, shape=merge shape, nf=1, type=reduce1]{#2}{#3}{#4}}
\newcommand\reduceII[4][] {\patterncluster[#1, shape=merge shape, nf=2, type=reduce2]{#2}{#3}{#4}}
\newcommand\reduceIII[4][]{\patterncluster[#1, shape=merge shape, nf=3, type=reduce3]{#2}{#3}{#4}}
\newcommand\reduceIV[4][] {\patterncluster[#1, shape=merge shape, nf=4, type=reduce4]{#2}{#3}{#4}}
%\newcommand\generate[4][] {\parcomp[#1, type=merge,reverse shape=true]{#2}{#3}{#4}}

\newcommand\systolic[4][] {\patterncluster[#1, shape=generic skel shape, nf=1]{#2}{#3}{#4}}

% Transition patterns

\newcommand\unzipx[3][]   
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape s1v1, type=unzipx]{#2}{#3}}
\newcommand\zipx[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape s1v1, reverse shape, type=zipx]{#2}{#3}}
\newcommand\unzipv[3][]
{\patternnodestd[#1, ni=1, no=2, outer shape=trans shape v1v2, type=unzipv]{#2}{#3}}
\newcommand\zipv[3][]
{\patternnodestd[#1, ni=2, no=1, outer shape=trans shape v2v1, type=zipv]{#2}{#3}}
\newcommand\splitatv[3][] 
{\patternnodestd[#1, ni=1, no=2, outer shape=trans shape v1v2, type=splitAt, nf=1]{#2}{#3}}
\newcommand\catv[3][]     
{\patternnodestd[#1, ni=2, no=1, outer shape=trans shape v2v1, type=cat]{#2}{#3}}
\newcommand\oddsv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1v1, type=odds]{#2}{#3}}
\newcommand\evensv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1v1, type=evens]{#2}{#3}}
\newcommand\reversev[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1v1, type=reverse]{#2}{#3}}
\newcommand\groupv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1gv1, type=group]{#2}{#3}}
\newcommand\concatv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1gv1, type=concat, reverse shape]{#2}{#3}}
\newcommand\filteridxv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1v1, type=filterIdx, nf=1]{#2}{#3}}
\newcommand\gatherv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1v1, type=gather, nf=2]{#2}{#3}}
\newcommand\gatherAdpv[3][]
{\patternnodestd[#1, ni=2, no=1, outer shape=trans shape v2v1, type=gatherAdp, nf=2]{#2}{#3}}
\newcommand\selectv[3][]
{\patternnodestd[#1, ni=2, no=1, outer shape=trans shape v2v1, type=select]{#2}{#3}}
\newcommand\distributev[3][]
{\patternnodestd[#1, ni=2, no=1, outer shape=trans shape v2v1, type=distribute, nf=1]{#2}{#3}}
\newcommand\filterv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1v1, type=filter, nf=1]{#2}{#3}}
\newcommand\getv[3][]
{\patternnodestd[#1, ni=1, no=1, outer shape=trans shape v1v1, type=get, nf=1]{#2}{#3}}

% Visual depictions of transition patterns

\newcommand\visualunzipv[3][]{
  \patternnodecustom[#1, ni=1, no=2, inner shape=custom conduit i4o8, 
  outer shape=trans shape v1v2]{#2}{#3};
  \foreach \i in {0,1,...,3} {
    \pgfmathtruncatemacro{\dbl}{\i+4}
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\dbl);
  }
}
\newcommand\visualzipv[3][]{
  \patternnodecustom[#1, ni=2, no=1, inner shape=custom conduit i8o4, 
  outer shape=trans shape v2v1]{#2}{#3};
  \foreach \i in {0,1,...,3} {
    \pgfmathtruncatemacro{\dbl}{\i+4}
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\dbl);
  }
}
\newcommand\visualoddsv[3][]{ 
  \patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
  outer shape=trans shape v1v1]{#2}{#3};
  \foreach \i in {0,2,...,6} {
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
  }
}
\newcommand\visualevensv[3][]{%
  \patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
  outer shape=trans shape v1v1]{#2}{#3};
  \foreach \i in {1,3,...,7} {
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
  }
}
\newcommand\visualreversev[3][]{%
  \patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
  outer shape=trans shape v1v1]{#2}{#3};
  \foreach \i in {0,1,...,7} {
    \pgfmathtruncatemacro\result{7-\i}
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\result);
  }
}
\newcommand\visualgroupv[3][]{%
  \patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
  outer shape=trans shape v1gv1]{#2}{#3};
  \foreach \i in {0,1,...,7} {
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
  }
}
\newcommand\visualconcatv[3][]{%
  \patternnodecustom[#1, ni=1, no=1, inner shape=custom conduit i8o8, 
  outer shape=trans shape v1gv1, reverse shape]{#2}{#3};
  \foreach \i in {0,1,...,7} {
    \draw[line width=.3pt] (#2-c.vi\i) -- (#2-c.vo\i);
  }
}
